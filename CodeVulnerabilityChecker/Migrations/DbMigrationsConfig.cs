using CodeVulnerabilityChecker.Models;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using System.Linq;

namespace CodeVulnerabilityChecker.Migrations
{
    public sealed class DbMigrationsConfig : DbMigrationsConfiguration<ApplicationDbContext>
    {

        public DbMigrationsConfig()
        {
            AutomaticMigrationsEnabled = true;
            AutomaticMigrationDataLossAllowed = true;
            ContextKey = "CodeVulnerabilityChecker.Models.ApplicationDbContext";
            
        }

        /// <summary>
        /// Seeds the database
        /// </summary>
        public class ApplicationDbInitializer : CreateDatabaseIfNotExists<ApplicationDbContext>
        {
            protected override void Seed(ApplicationDbContext context)
            {
                //  This method will be called after migrating to the latest version.
                // Seed initial data only if the database is empty

                if (!context.Users.Any())
                {

                    //Declares identity variables
                    var roleStore = new RoleStore<IdentityRole>(context);
                    var roleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(context));
                    var userManager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(context));
                    var userStore = new UserStore<ApplicationUser>(context);


                    // Populating the Role table
                    if (!roleManager.RoleExists(Roles.ROLE_ADMIN))
                    {
                        var roleresult = roleManager.Create(new IdentityRole(Roles.ROLE_ADMIN));
                    }

                    if (!roleManager.RoleExists(Roles.ROLE_USER))
                    {
                        var roleresult = roleManager.Create(new IdentityRole(Roles.ROLE_USER));
                    }


                    // Admin and user roles

                    string userName = "admin@codescanner.com";
                    string password = "admin123";

                    // Creates admin

                    var adminUser = userManager.FindByName(userName);

                    if (adminUser == null)
                    {

                        var newAdmin = new ApplicationUser()
                        {
                            FullName = "Administrator",
                            UserName = userName,
                            Email = userName,
                            EmailConfirmed = true

                        };

                        userManager.Create(newAdmin, password);
                        userManager.AddToRole(newAdmin.Id, Roles.ROLE_ADMIN);
                    }


                }

                base.Seed(context);

            }
        }

        


    }
}