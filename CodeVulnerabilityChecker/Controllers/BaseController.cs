using CodeVulnerabilityChecker.Models;
using Microsoft.AspNet.Identity;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;

namespace CodeVulnerabilityChecker.Controllers
{
    public class BaseController : Controller
    {
        /// <summary>
        /// The database context
        /// </summary>
        protected ApplicationDbContext db = new ApplicationDbContext();
        
        /// <summary>
        /// Get currently logged in user
        /// </summary>
        /// <returns></returns>
        public string currentUserId()
        {
            string userId = User.Identity.GetUserId();

            return userId;
        }

        /// <summary>
        /// Check if admin
        /// </summary>
        /// <returns></returns>
        public bool IsAdmin()
        {
            var currentUserId = this.User.Identity.GetUserId();
            var isAdmin = (currentUserId != null && this.User.IsInRole("Admin"));
            return isAdmin;
        }

        /// <summary>
        /// Convert a stream to a byte[]
        /// </summary>
        /// <param name="sourceStream"></param>
        /// <returns></returns>
        public byte[] ConvertStreamToByte(Stream sourceStream)
        {
            var memoryStream = new MemoryStream();
            sourceStream.CopyTo(memoryStream);

            return memoryStream.ToArray();
        }

        /// <summary>
        /// Convert a string to a byte[]
        /// </summary>
        /// <param name="sourceString"></param>
        /// <returns></returns>
        public byte[] ConvertStringToByte(string sourceString)
        {
            byte[] returnByte = Encoding.ASCII.GetBytes(sourceString);

            return returnByte;
        }

        /// <summary>
        /// Convert a byte to a string
        /// </summary>
        /// <param name="sourceByte"></param>
        /// <returns></returns>
        public string ConvertByteToString(byte[] sourceByte)
        {
            string returnString = Encoding.ASCII.GetString(sourceByte);

            return returnString;
        }


        /// <summary>
        /// Check if the currently logged in user has any existing files. 
        /// </summary>
        /// <returns></returns>
        public bool CheckIfFileExists()
        {

            string currUser = currentUserId();

            if (db.UserFiles.Where(f => f.FileOwner == currUser).Any())
            {
                return true;
            }
            else
            {
                return false;
            }

        }


        /// <summary>
        /// API call to get JSON. 
        /// (This was going to be used to string match vulnerabilities directly from the API, but I decided against it to save time and focus on app security.)
        /// </summary>
        /// <returns></returns>
        public async Task<ActionResult> GetJson()
        {
            using (var client = new HttpClient())
            {
                string url = "https://cve.circl.lu/api/search/microsoft/.net_framework";

                var response = await client.GetAsync(url);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadAsStringAsync();
                    return Content(result, "application/json");
                }
                else
                {
                    return Content("Failed to get data from cve.circl.lu/api");
                }

                
            }
        }

    }
}