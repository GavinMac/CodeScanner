using CodeVulnerabilityChecker.Extensions;
using CodeVulnerabilityChecker.Models;
using Microsoft.AspNet.Identity;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace CodeVulnerabilityChecker.Controllers
{
    public class FileController : BaseController
    {

        public ActionResult UploadFile()
        {
            ViewBag.Message = "Upload a file";
            return View();
        }

        /// <summary>
        /// Upload File to database
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult UploadFile(FileInputModel fileInput)
        {
         
            if (fileInput != null && ModelState.IsValid && fileInput.UsrFile.ContentLength > 0 && fileInput.UsrFile.ContentLength <= 5000000 && fileInput.UsrFile.ContentType.Contains("text"))
            {

                if (CheckIfFileExists() == true)
                {
                    string currUser = currentUserId();
                    var fileToDelete = db.UserFiles.FirstOrDefault(f => f.FileOwner == currUser);
                    db.UserFiles.Remove(fileToDelete);
                }

                var file = new UserFile()
                {
                    FileName = Path.GetFileName(fileInput.UsrFile.FileName),
                    FileDate = DateTime.Now,
                    FileOwner = currentUserId(),
                    FileContent = ConvertStreamToByte(fileInput.UsrFile.InputStream)
                };

                db.UserFiles.Add(file);
                db.SaveChanges();

                this.AddNotification("File has been uploaded.", NotificationType.SUCCESS);
                return RedirectToAction("Scanning", "Scan");
            }
            else if(fileInput != null && ModelState.IsValid && fileInput.UsrFile.ContentLength > 5000000 || !fileInput.UsrFile.ContentType.Contains("text"))
            {
                this.AddNotification("File must be a .txt and less than 5Mb.", NotificationType.ERROR);
                return RedirectToAction("UploadFile", "File");
            }

            return View();

        }      


    }
}