using CodeVulnerabilityChecker.Extensions;
using CodeVulnerabilityChecker.Models;
using Microsoft.AspNet.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;

namespace CodeVulnerabilityChecker.Controllers
{
    public class CodeController : BaseController
    {

        public ActionResult InputCode()
        {
            ViewBag.Message = "Input some text as a code snippet";
            return View();
        }

        /// <summary>
        /// Insert code
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult InputCode(CodeInputModel model)
        {
            if (model != null && this.ModelState.IsValid)
            {

                if (CheckIfFileExists() == true)
                {
                    string currUser = currentUserId();
                    var fileToDelete = db.UserFiles.FirstOrDefault(f => f.FileOwner == currUser);
                    db.UserFiles.Remove(fileToDelete);
                }

                var file = new UserFile()
                {
                    FileName = model.CodeTitle,
                    FileDate = DateTime.Now,
                    FileOwner = User.Identity.GetUserId(),
                    FileContent = ConvertStringToByte(model.CodeContent)
                };

                db.UserFiles.Add(file);
                db.SaveChanges();

                this.AddNotification("SUCCESS! Code has been submitted.", NotificationType.SUCCESS);
                return RedirectToAction("Scanning", "Scan");

            }

                return View(model);
        }
    }
}